// Generated by CoffeeScript 1.7.1
var fs, gui, marked, path, ui;

ui = require("../js/ui");

gui = require('nw.gui');

fs = require("fs");

path = require("path");

marked = require('marked');

global.$ = $;

$(function() {
  var f, files, fillTab, holder, interceptLinks, layout, openFile, rewriteImageSrc, syncTab, tabs, win, _i, _len;
  tabs = new ui.Tabs(".ui-layout-center");
  tabs.setWelcome("<div class='.welcome' style=' text-align:center; font-size:10pt; color:#CC7A29; margin:40px; padding:80px; border: 2px dashed gray; -webkit-border-radius: 40px; '> <h2>HandsDown</h2> <h1><i class='fa fa-hand-o-down fa-3x'></i></h1> <p style='margin-left:auto;margin-right:auto;width:400px;text-align:left'> Hands down, this is the simplest <b>viewer for Markdown</b> (and other) files you have ever seen. </p> <h2 style=' margin:40px; padding:20px; border: 0px dashed gray; -webkit-border-radius: 20px; background-color:#CC7A29; color:#FFFFFF; '>Drag and drop your files here...</h2> <p style='margin-left:auto;margin-right:auto;width:400px;text-align:left'> ... and they will automatically update whenever you change them in your editor. </p> <p style='margin-left:auto;margin-right:auto;width:400px;text-align:left'> <small><i> &copy; 2014 Kai Eckert, <a href='https://github.com/kaiec/HandsDown' style='color:#CC7A29'> github.com/kaiec/HandsDown </a> </i></small> </p> </div>");
  layout = $('body').layout();
  marked.setOptions({
    highlight: function(code) {
      var hljs;
      hljs = require('highlight.js');
      hljs.configure({
        classPrefix: ''
      });
      return hljs.highlightAuto(code).value;
    }
  });
  interceptLinks = function(tab) {
    return $("#" + tab.domid + " a").click(function(e) {
      var file, href;
      e.preventDefault();
      href = $(this).attr('href');
      console.log("Click: " + href);
      file = path.dirname(tab.tabid) + path.sep + href;
      if (fs.existsSync(file)) {
        return openFile(file);
      } else {
        return gui.Shell.openExternal(href);
      }
    });
  };
  rewriteImageSrc = function(tab) {
    return $("img").each(function() {
      var file;
      file = path.dirname(tab.tabid) + path.sep + $(this).attr("src");
      if (fs.existsSync(file)) {
        return $(this).attr("src", file);
      }
    });
  };
  fillTab = function(f, tab) {
    return fs.readFile(f, "utf8", function(err, data) {
      var escape, hljs;
      if (err) {
        throw err;
      }
      if (path.extname(f) === ".md") {
        return marked(data, function(err, data) {
          if (err) {
            throw err;
          }
          tab.setContent(data);
          interceptLinks(tab);
          rewriteImageSrc(tab);
          return console.log("Added: " + f);
        });
      } else {
        escape = require('escape-html');
        hljs = require('highlight.js');
        hljs.configure({
          classPrefix: ''
        });
        data = hljs.highlightAuto(data).value;
        tab.setContent("<pre>" + data + "</pre>");
        return console.log("Added: " + f);
      }
    });
  };
  syncTab = function(f, tab) {
    return function(event, file) {
      console.log(file + " " + event + " " + f + " " + tab.tabid);
      if (event === "change") {
        fillTab(f, tab);
        return tab.select();
      }
    };
  };
  openFile = function(f) {
    var tab;
    f = path.normalize(f);
    tab = tabs.addTab(f, path.basename(f));
    fillTab(f, tab);
    tab.select();
    return fs.watch(f, {
      persistent: true
    }, syncTab(f, tab));
  };
  files = [];
  if (localStorage.files) {
    files = JSON.parse(localStorage.files);
  }
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    f = files[_i];
    f = fs.realpathSync(f);
    openFile(f);
  }
  window.ondragover = function(e) {
    e.preventDefault();
    return false;
  };
  window.ondrop = function(e) {
    e.preventDefault();
    return false;
  };
  holder = window;
  holder.ondragover = function() {
    this.className = "hover";
    return false;
  };
  holder.ondragend = function() {
    this.className = "";
    return false;
  };
  holder.ondrop = function(e) {
    var i;
    e.preventDefault();
    i = 0;
    while (i < e.dataTransfer.files.length) {
      f = e.dataTransfer.files[i].path;
      openFile(f);
      ++i;
    }
    return false;
  };
  win = gui.Window.get();
  return win.on('close', function(e) {
    localStorage.files = JSON.stringify(tabs.getTabIDs());
    return this.close(true);
  });
});

//# sourceMappingURL=index.map
